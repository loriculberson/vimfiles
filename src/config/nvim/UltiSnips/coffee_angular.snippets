extends coffee

snippet ngc "Angular controller" b
#= require ../index

class $2Ctrl
  constructor: ->
    $3

angular.module('${1:module.name}')
  .controller('${2:ControllerName}Ctrl', [
    $2Ctrl
  ])
endsnippet

snippet ngct "Angular controller test" b
#= require ${1:source/file/path}

describe '${2:ControllerName}Ctrl', ->
  [$controller, $scope] = []

  beforeEach ->
    module '${3:module.name}'

    inject (_$controller_, $rootScope) ->
      $controller = _$controller_
      $scope = $rootScope.$new()

  makeController = (services = {}) ->
    services.$scope ?= $scope
    $controller '$2Ctrl', services

  $4
endsnippet

snippet ngda "Angular attribute directive" b
#= require ../index

${2/.+/\l$0/}Directive = ->
  restrict: 'A'

  link: (scope, element, attrs) ->
    $3

angular.module('${1:module.name}')
  .directive('${2:directiveName}', [
    ${2/.+/\l$0/}Directive
  ])
endsnippet

snippet ngdat "Angular attribute directive test" b
#= require ${1:source/file/path}

describe '${2:<ANY directive-name>}', ->
  [$compile, $scope] = []

  beforeEach ->
    module '${3:module.name}'

    inject (_$compile_, $rootScope) ->
      $compile = _$compile_
      $scope = $rootScope.$new()

  compileDirective = ->
    template = """
      $2
    """
    $compile(template)($scope)

  $4
endsnippet

snippet ngdt "Angular directive (with template)" b
#= require ../index

${2/.+/\l$0/}Directive = ->
  restrict: '${3:E|A|C|M}'

  templateUrl: '/templates/${4:path_to_template.html}'

  scope:
    ${5:object (isolate) | true (child) | false (none)}

  link: (scope, element, attrs) ->
    $6

angular.module('${1:module.name}')
  .directive('${2:directiveName}', [
    ${2/.+/\l$0/}Directive
  ])
endsnippet

snippet ngdtt "Angular directive (with template) test" b
#= require ${1:source/file/path}

describe '${2:<directive-name> | <ANY directive-name>}', ->
  [$compile, $scope] = []
  templateUrl = '/templates/${3:path_to_template.html}'

  fixture.preload(templateUrl)

  beforeEach ->
    module '${4:module.name}'

    inject (_$compile_, $rootScope, $templateCache) ->
      $compile = _$compile_
      $scope = $rootScope.$new()

      fixture.load(templateUrl)
      $templateCache.put(templateUrl, fixture.el.innerHTML)

  compileDirective = ->
    template = """
      $2
    """
    $compile(template)($scope)

  $5
endsnippet

snippet ngfc "Angular factory (class)" b
#= require ../index

${2/.+/\l$0/}Factory = ->
  class $2
    $3

angular.module('${1:module.name}')
  .factory('${2:ClassName}', [
    ${2/.+/\l$0/}Factory
  ])
endsnippet

snippet ngfct "Angular factory (class) test" b
#= require ${1:source/file/path}

describe '${2:ClassName}', ->
  [$2] = []

  beforeEach ->
    module '${3:module.name}'

    inject (_$2_) ->
      $2 = _$2_

  $4
endsnippet

snippet ngff "Angular factory (function)" b
#= require ../index

${2/.+/\l$0/}Factory = ->
  (${3:arguments...}) ->
    $4

angular.module('${1:module.name}')
  .factory('${2:functionName}', [
    ${2/.+/\l$0/}Factory
  ])
endsnippet

snippet ngfft "Angular factory (function) test" b
#= require ${1:source/file/path}

describe '${2:functionName}', ->
  [$2] = []

  beforeEach ->
    module '${3:module.name}'

    inject (_$2_) ->
      $2 = _$2_

  $4
endsnippet

snippet ngs "Angular service" b
#= require ../index

class ${2/.+/\u$0/}
  $3

angular.module('${1:module.name}')
  .service('${2:serviceName}', [
     ${2/.+/\u$0/}
  ])
endsnippet

snippet ngst "Angular service test" b
#= require ${1:source/file/path}

describe '${2:serviceName}', ->
  [$2] = []

  beforeEach ->
    module '${3:module.name}'

    inject (_$2_) ->
      $2 = _$2_

  $4
endsnippet

snippet ngF "Angular filter" b
#= require ../index

$2Filter = ->
  (${3:arguments...}) ->
    $4

angular.module('${1:module.name}')
  .filter('${2:filterName}', [
    $2Filter
  ])
endsnippet

snippet ngFt "Angular filter test" b
#= require ${1:source/file/path}

describe '${2:filterName}Filter', ->
  [$2Filter] = []

  beforeEach ->
    module '${3:module.name}'

    inject (_$2Filter_) ->
      $2Filter = _$2Filter_

  $4
endsnippet

snippet ngD "Angular decorator" b
#= require ../index

$2DecoratorFacrory = ($delegate) ->
  $2 = $delegate

  ${3:...decorate the service here...}

  $2

angular.module('${1:module.name}')
  .config([
    '$provide'
    ($provide) -> $provide.decorator('${2:decoratedServiceName}', $2DecoratorFactory)
  ])
endsnippet

snippet ngDt "Angular decorator test" b
#= require ${1:source/file/path}

describe '${2:decoratedServiceName}Decorator', ->
  [$2Decorator] = []

  beforeEach ->
    module '${3:module.name}'

    inject (_$2Decorator_) ->
      $2Decorator = _$2Decorator_

  $4
endsnippet

snippet ngbuilder "Builder for Angular fake object" b
${1:buildSomething} = (properties = {}) ->
  _.defaults properties,
    $2
endsnippet
